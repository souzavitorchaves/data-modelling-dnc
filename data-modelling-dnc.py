# -*- coding: utf-8 -*-
"""RID155811_Desafio05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1moTuIpJVAgt0rNb8lmvvEs_hboTe45dO

# Desafio 05: Prepare seu dataset para modelagem de dados
*link do Desafio: https://dncgroupbr.notion.site/Desafio-Prepare-seu-dataset-para-modelagem-de-dados-6eba93d9b756469eab2a286880d3f897*

**Tarefas a serem executadas**


1.   Leia o arquivo e inspecione os dados ✅

2.   Verifique se há valores faltantes na identificação do cliente ✅
    
3.   Verifique se há produtos com preços unitários iguais ou inferior a 0 ✅

4.   Verifique se existem linhas duplicadas ✅
    
5.   Tipos de dados da coluna ✅

6.   Tratando os outliers ✅

7.   Crie uma coluna adicional ✅

8.   Última data ✅

9.   Plotando gráficos ✅

10.  Cálculo do RFM ✅

##Importando bibliotecas e dados##
"""

#installing the most recently version od pandas profiling
!pip install ydata-profiling

#used for data manipulation and metrics
import numpy as np
import pandas as pd
import calendar
from ydata_profiling import ProfileReport
from datetime import datetime

#graphic visualization of the data
import seaborn as sns
import matplotlib.pyplot as plt

#
from sklearn import metrics
from sklearn.preprocessing import scale, StandardScaler, OneHotEncoder, OrdinalEncoder

url = 'https://drive.google.com/file/d/10M9-BH2PRE17_vLHVnks-H7ochgfO1b-/view?usp=sharing'
url = 'https://drive.google.com/uc?id=' + url.split('/')[-2]
df = pd.read_csv(url, encoding='unicode_escape')

"""## 1 - Leia o arquivo e inspecione os dados ##"""

df.describe()

#ProfileReport(df)

"""## 2 - Valores faltantes na identificação do cliente ##"""

df.isna().sum()

df = df.dropna()
df.describe()

df.isna().sum()

"""## 3 - Preços unitários e quantidade de produtos iguais ou inferior a 0 ##"""

df[df['UnitPrice'].isnull()]

df[df['UnitPrice']<0]

df = df[df['UnitPrice']>0]
df

df.describe()

df[df['Quantity'].isnull()]

df = df[df['Quantity']>0]
df

df.describe()

"""## 4 - Verifique se existem linhas duplicadas ##"""

df = df.drop_duplicates()
df

df.describe()

"""## 5 - Tipos de dados da coluna ##"""

df.info()

df['CustomerID'] = df['CustomerID'].astype(int)

df.info()

df[df['InvoiceDate'].str.contains('12/13/2010')]

dateFormat = '%m/%d/%Y %H:%S'
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], format=dateFormat)
df.info()

"""## 6 - Tratando os Outliers ##"""

numeric_cols = df.select_dtypes('number').columns.difference(['CustomerID'])

df[numeric_cols].apply(scale).plot.box(figsize=(18,7));

df = df[(df['Quantity']<=10000) & (df['UnitPrice']<=5000)]

df[numeric_cols].apply(scale).plot.box(figsize=(18,7));

"""## 7  - Crie uma coluna adicional ##"""

df['Total'] = df['UnitPrice'] * df['Quantity']

df.head()

"""## 8 - Última data ##"""

df['InvoiceDate'].max()

df.loc[df['InvoiceDate'].idxmax()]

"""## 9 - Plotando gráficos ##



1.   Top 10 países com maior valor em vendas
2.   Top 10 produtos mais vendidos
3.   Valor de venda total por mês
4.   Valor de venda total por país
5.   Valor de venda total por mês e por país




"""

top10countries = round(df.groupby('Country')['Total'].agg('sum').sort_values(ascending = False).reset_index()[0:10],2)
top10countries
plt.figure(figsize=(10,6))
plt.xlabel('Valor em Milhões')
plt.title('Top 10 países com maior valor em vendas')
plt.barh(top10countries['Country'], top10countries['Total'], color='#FF3333');
plt.show();

top10products = round(df.groupby('Description')['Quantity'].agg('sum').sort_values(ascending = False).reset_index()[0:10],2)
top10products
plt.figure(figsize=(10,6))
plt.xlabel('Qtde Produtos')
plt.title('Top 10 produtos mais vendidos')
plt.barh(top10products['Description'], top10products['Quantity'], color='#4381C1');
plt.show();

df['Month'] = df['InvoiceDate'].dt.month.apply(lambda x: calendar.month_name[x])
#df['Month'] = df['Month'].dt.strftime('%B')
totalPerMonth = round(df.groupby('Month')['Total'].agg('sum')
                    .reset_index().sort_values(by='Total',ascending=False),2)

plt.figure(figsize=(10,6))
plt.xlabel('Valor em Milhões')
plt.title('Valor de venda total por mês')
plt.barh(totalPerMonth['Month'], totalPerMonth['Total'], color='#FF3033');
plt.show();

plot1 = df[['Month', 'Country', 'Total']]
plot1 = plot1.groupby(['Country','Month'])['Total'].agg('sum')
#plot1.plot(plot1['Month'], plot1['Total'])
plt.figure(figsize=(14,6))
plot1.plot()

"""## 10 - Cálculo do RFM ##

Agrupe os dados por cliente e pedido/compra (InvoiceNo) e obtenha a data e o preço total do pedido.
Com isso, agrupe novamente apenas por cliente e calcule o RFM, onde:

- R é a recência, diferença em dias da última compra do cliente e da última compra disponível no conjunto de dados, que calcularam previamente.
- F é a frequência, ou seja, a quantidade de compras feitas pelo cliente = quantas vezes esse cliente se repete
- M é o ticket médio, ou seja, a média das compras feitas pelo cliente = sum(total) / count(customerID)
"""



df.info()

#recency
last_date = df['InvoiceDate'].max()
df_rfm = df.groupby('CustomerID')['InvoiceDate'].max().reset_index()
df_rfm['Recency']= (df_rfm['InvoiceDate'] - last_date).dt.days
df_rfm

#frequency
df_rfm['Frequency'] = df['CustomerID'].map(df['CustomerID'].value_counts())
df_rfm

df_rfm.info()

#m - average
SumCustomer = df.groupby('CustomerID')['Total'].sum() #ok
CountCustomer = df.groupby('CustomerID')['Total'].count() #ok
#new df with average
average_df = pd.DataFrame({
                           'Average': SumCustomer / CountCustomer}).reset_index()
#merge df to unify "CustomerID"
df_rfm = pd.merge(df_rfm, average_df, on='CustomerID', how='left')
df_rfm.head()